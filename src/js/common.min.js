
document.addEventListener(
	"DOMContentLoaded", () => {
		// раздаем классы toggle первым элементам внутри родительских, предварительно почистив их у других элементов
let initClassToggleItem = function(parentElement, childElement) {
    if (document.querySelector(parentElement)) {
        const parents = document.querySelectorAll(parentElement);
        parents.forEach(function(element) {
            let childrens = element.querySelectorAll(childElement);
            childrens.forEach(function(element) {
                element.classList.remove('toggle');
            });

            if (element.querySelector(childElement)) {
                element.querySelector(childElement).classList.add('toggle');
            };
        });
    };
};

initClassToggleItem('.options-type__variants', '.variants-item'); // выпадашка с вариантами для строки поиска
initClassToggleItem('.header-bottom-menu', '.menu-hb'); // выпадашка для выбора меню в .header-bottom


// Табы. Параметры: класс для кнопок табов и класс содержимого табов
const tabsToggle = function(tabBtnClass, tabContentClass) {

    if (document.querySelector(tabBtnClass)) {
        const tabsBtn = document.querySelectorAll(tabBtnClass); // все кнопки табов
        const tabsContent = document.querySelectorAll(tabContentClass); // все содержимое табов

        // Перебираем кнопки табов, по которым можем щелкнуть
        tabsBtn.forEach(function(btn, index) {

            // Вешаем событие клика на каждую кнопку
            btn.addEventListener('click', function () {

                // у всех кнопок одного родителя убрать класс активности
                tabsBtn[index].parentNode.querySelectorAll(tabBtnClass).forEach(function(element) {
                    element.classList.remove('toggle');
                });

                // у кнопки, по которой щелкнули, добавить класс активности
                tabsBtn[index].classList.add('toggle');

                // у каждого содержимого одного родителя удалить класс активности
                tabsContent[index].parentNode.querySelectorAll(tabContentClass).forEach(function(element) {
                    element.classList.remove('toggle');
                });

                // у содержимого с этим индексом добавить класс активности
                tabsContent[index].classList.add('toggle');

            });

        });

    };
};

tabsToggle('.toggle-hb .variants-item', '.menu-hb');


// Переключаем класс toggle элемента по клику на этот же элемент. Параметр - классэлемента
let elementToggle = function(element) {
    if (document.querySelector(element)) {
        document.addEventListener('click', function (e) {
            if (e.target.closest(element)) {
                e.preventDefault();
                e.target.closest(element).classList.toggle('toggle');
            };
        });
    };
};

elementToggle('.product-slide__favorite');
elementToggle('.mob-menu .dropdown');


// Переключатель класса toggle у элемента по клику на другом элементе. Параметры - класс элемента по которому кликаем и класс элемента, которому переключаем класс toggle
let classToggler = function(elementBtn, elementTarget) {
    if (document.querySelector(elementBtn) && document.querySelector(elementTarget)) {
        document.querySelector(elementBtn).addEventListener('click', function () {
            document.querySelector(elementTarget).classList.toggle('toggle');
        });
    };
};

classToggler('.catalog-menu__btn', '.panel-menu');


// по клику на элемент у всех подобных убираем .toggle, а у выбранного добавляем его
let classToggleForElement = function(classElement) {
	if (document.querySelector(classElement)) {
		let items = document.querySelectorAll(classElement);

		items.forEach(function(element, index) {
			element.addEventListener('click', function() {
				items.forEach(function(element) {
					element.classList.remove('toggle');
				});
				this.classList.toggle('toggle');
			});
		});
	};
};

// classToggleForElement('.s09-item');


// Функция для перемещения элемента в другой элемент. Параметры: куда перемещаем, что перемещаем, способ перемещения
let movingConstructor = function(to, metod, block) {
    if (!(document.querySelector(block) && document.querySelector(to))) {
        // console.log("переноса не будт");
        return;
    } else {
        switch (metod) {
            case 'prepend':
                document.querySelector(to).prepend(document.querySelector(block));
                break;

            case 'before':
                document.querySelector(to).before(document.querySelector(block));
                break;

            case 'after':
                document.querySelector(to).after(document.querySelector(block));
                break;

            default:
                document.querySelector(to).append(document.querySelector(block));
                break;
        };
    }
};


// функция будет перемещать блок в указанное место при определенной ширине экрана
let moving = function () {
    const windowWidth = window.innerWidth; // ширина экрана
    
    if (windowWidth <= 768) {
        movingConstructor('.b07__inner', 'append', '.b07-map');
        movingConstructor('.b07__inner', 'append', '.b07__descr');
        movingConstructor('.footer-box', 'append', '.footer-contacts');
        movingConstructor('.jsFavorite .b-bottom', 'append', '.jsFavorite .b-top__readmore');
        movingConstructor('.jsSale .b-bottom', 'append', '.jsSale .b-top__readmore');
        movingConstructor('.jsNewProducts .b-bottom', 'append', '.jsNewProducts .b03__btn');
    } else {
        movingConstructor('.b07', 'prepend', '.b07-map');
        movingConstructor('.b07__descr-box', 'prepend', '.b07__descr');
        movingConstructor('.footer-block__shop', 'append', '.footer-contacts');
        movingConstructor('.jsFavorite .b02__top', 'append', '.jsFavorite .b-top__readmore');
        movingConstructor('.jsSale .b02__top', 'append', '.jsSale .b-top__readmore');
        movingConstructor('.jsNewProducts .b03-box', 'append', '.jsNewProducts .b03__btn');
    };
    
};

moving();
window.addEventListener('resize', moving);

if (document.querySelector('.js-burger')) {

    const btnBurger = document.querySelectorAll('.js-burger');

    // Открыть / закрыть бургер по клику на него
    function btnBurgerToggle(e) {
        e.target.classList.toggle('toggle');
    }

    // При ресайзе возвращаем кнопки в исходное состояние
    // function btnBurgerToggleClassRemove() {
    //     btnBurger.forEach(element => {
    //         element.classList.remove('toggle');
    //     });
    // }

    btnBurger.forEach(element => {
        element.addEventListener("click", btnBurgerToggle);
        // window.addEventListener("resize", btnBurgerToggleClassRemove);
    });
}

// по клику на .js-catalog-open-btn открываем / закрываем меню с категориями каталога
if (document.querySelector('.js-catalog-open-btn')) {
    const catalogOpenBtn = document.querySelectorAll('.js-catalog-open-btn');

    // Открыть / закрыть подменю по клику на .js-catalog-open-btn
    function toggleOpen(e) {

        const toggleBtn = (this.closest('.js-catalog-open-btn'));
        const toggleBody = toggleBtn.nextElementSibling;

        toggleBody.classList.toggle('toggle');
    }

    catalogOpenBtn.forEach(element => {
        element.addEventListener("click", toggleOpen);
        // window.addEventListener("resize", btnBurgerToggleClassRemove);
    });
}



// Делаем правильный отступ сверху для панели
let catalogMenuInit = function() {

    if (document.querySelector('.catalog-menu__btn') && document.querySelector('.panel-menu')) {

        const catalogBtn = document.querySelector('.catalog-menu__btn');
        const panelMenuBox = document.querySelector('.panel-menu__box');
        const catalogSubmenu = '.catalog-submenu';
        const catalogLinks = document.querySelectorAll('.catalog-menu__link');
        const catalogMenuPanel = document.querySelector('.panel-menu');

        // Делаем правильный отступ сверху для панели
        let catalogMenuIndent = function() {
            catalogBtn.addEventListener('click', function () {
                const hHeader = document.querySelector('.header').offsetHeight;
                const hHeaderBottom = document.querySelector('.header-bottom').offsetHeight;

                catalogMenuPanel.style.top = hHeader - hHeaderBottom + 'px';
            });
        };

        catalogMenuIndent();

        // Высота панели и ширина подменю
        let catalogMenuSize = function() {
            catalogLinks.forEach(function(element) {
                element.addEventListener('mouseenter', function () {
                    if (element.parentElement.querySelector(catalogSubmenu)) {
                        const hCatalogSubmenu = element.parentElement.querySelector(catalogSubmenu).offsetHeight + 30;
                        catalogMenuPanel.style.minHeight = hCatalogSubmenu + 'px';

                        const wCatalogSubmenu = panelMenuBox.offsetWidth - element.offsetWidth;
                        element.parentElement.querySelector(catalogSubmenu).style.width = wCatalogSubmenu + 'px';
                    };
                });
            });
        };

        catalogMenuSize();

        // Закрываем панель при ресайзе окна
        let catalogClose = function() {
            catalogBtn.classList.remove('toggle');
            catalogMenuPanel.classList.remove('toggle');
        };

        // Закрываем панель при ресайзе окна
        window.addEventListener('resize', function() {
            catalogClose();
        });
    };
};


catalogMenuInit();



// появление выпадашки с вариантами по щелчку на кнопку с выбором типа options-type__current
let optionsToggle = function() {

    if (document.querySelector('.options-type__current')) {
        let optionsTypeCurrent = document.querySelectorAll('.options-type__current');
        optionsTypeCurrent.forEach(function(element, index) {
            element.addEventListener('click', function() {
                this.parentElement.classList.toggle('toggle');
            });
        });
    };
};

optionsToggle();


// выбор варианта
let optionsSelect = function() {

    let btnVariants = document.querySelectorAll('.variants-item');
    let variantTitle;

    // по клику на вариант у всех убираем .toggle, а у активного добавляем его
    btnVariants.forEach(function(element, index) {
        element.addEventListener('click', function() {

            btnVariants.forEach(function(element) {
                element.classList.remove('toggle');
            });
            this.classList.toggle('toggle');

            // Текст выбраного варианта в кнопку
            variantTitle = this.innerText;
            this.parentElement.previousElementSibling.querySelector('.title').innerText = variantTitle;
            this.parentElement.classList.remove('toggle');
            this.closest('.options-type').classList.remove('toggle');

        });
    });

};

optionsSelect();// Инициализация слайдера swiper
// https://swiperjs.com/

function initSwiper() {

	// Задаем конструктор для однотипных слайдов
	function makeSwiper(target) {
		if (document.querySelector(target)) {
			new Swiper(target, {
				spaceBetween: 16,
				slidesPerView: 1.2,
				loop: true,
				breakpoints: {
					320: {
						slidesPerView: 1.2,
					},
					400: {
						slidesPerView: 2.2,
					},
					660: {
						slidesPerView: 3.2,
					},
					992: {
						slidesPerView: 4,
					},
				},
				navigation: {
					nextEl: `${target}__next`,
					prevEl: `${target}__prev`,
				},
			});
		};
	};

	// Применяем конструктор к нужным классам
	makeSwiper(".jsProductSlider");
	makeSwiper(".jsProductSliderSale");

	// Мини слайдер товаров 
	if (document.querySelector('.jsProductSliderMini')) {
		const prodSliderInner = new Swiper('.jsProductSliderMini', {
			spaceBetween: 16,
			slidesPerView: 1.2,
			loop: true,
			breakpoints: {
				400: {
					slidesPerView: 2.2,
				},
				769: {
					slidesPerView: 2,
				},
			},
			navigation: {
				nextEl: ".jsProductSliderMini__next",
				prevEl: ".jsProductSliderMini__prev",
			},
		});
	};

	if (document.querySelector('.jsBigSlider')) {
		const jsBigSlider = new Swiper('.jsBigSlider', {
			spaceBetween: 10,
			slidesPerView: 1,
			loop: true,

			breakpoints: {
				769: {
					slidesPerView: 1,
					spaceBetween: 16,
				},
			},

			pagination: {
				el: ".jsBigSlider__pagination",
			},

			navigation: {
				nextEl: ".jsBigSlider__next",
				prevEl: ".jsBigSlider__prev",
			},
		});
	};

};

// window.addEventListener("resize", initSwiper);
window.addEventListener("resize", function () {
	// setTimeout(initSwiper, 200);
	initSwiper();
	// swiper.init();
});

initSwiper();if (document.querySelector('.jsMobileMenuBtnToggle')) {

    let menuPanelInit = function () {
        const menuBtn = document.querySelector('.jsMobileMenuBtnToggle');
        const menu = document.querySelector('.mobile-menu');
        const body = document.querySelector('body');
        // const menuLink = document.querySelectorAll('.menu-link'); // для  меню по секциям
    
        // Показать / скрыть мобильное меню - toggle
        function menuPanelToggle() {
            if (menuBtn.classList.contains('toggle')) {
                menu.classList.add('toggle');
                body.classList.add('toggle');
            } else {
                menu.classList.remove('toggle');
                body.classList.remove('toggle');
            };
        };
    
        // Определяем высоту мобильного меню и размещаем под шапкой
        function menuPanelPosition() {
            const heightViewport = document.documentElement.clientHeight;
            const heightHeader = document.querySelector('.header').offsetHeight;
            const heightMenuOverlay = heightViewport - heightHeader;
            // let posTop = window.pageYOffset;
            let posTop = window.scrollY;
    
            const menuActive = document.querySelector('.mobile-menu.toggle');
    
            if (menuActive) {
                menuActive.style.height = heightMenuOverlay + 'px';
                // menuActive.style.top = posTop + heightHeader + 'px';
                menuActive.style.top = posTop + 'px';
            };
        };
    
        // Закрыть мобильное меню
        function menuPanelClose() {
            menuBtn.classList.remove('toggle');
            menu.classList.remove('toggle');
            body.classList.remove('toggle');
        };

        // Закрываем мобильное меню по клику вне его
        function menuPanelOnClickClose() {
            document.addEventListener("click", function(e) {
                const target = e.target;
                const its_menu = target == menu || menu.contains(target);
                const its_btnMenu = target == menuBtn;
    
                if (!its_menu && !its_btnMenu) {
                    menuPanelClose();
                };
            });
        };
    
        // Закрыть мобильное меню при resize
        window.addEventListener('resize', function () {
            menuPanelClose();
        }, true);
    
        // Закрываем меню (для меню по секциям)
        // menuLink.forEach(element => {
        //     element.addEventListener("click", menuPanelClose);
        // });
    
        // Показать / скрыть мобильное меню
        let menuLaunch = function() {
            menuPanelToggle();
            menuPanelPosition();
            menuPanelOnClickClose();
        };

        menuBtn.addEventListener("click", menuLaunch);
    };

    menuPanelInit();

};function loadData() {
	return new Promise((resolve, reject) => {
	  	// setTimeout не является частью решения
	  	// Код ниже должен быть заменен на логику подходящую для решения вашей задачи
		setTimeout(resolve, 100);
	})
};

loadData()
	.then(() => {
		let preloaderEl = document.getElementById('preloader');
		preloaderEl.classList.add('hidden');
		preloaderEl.classList.remove('visible');
	});// Инициализация Inputmask
// https://github.com/RobinHerbots/Inputmask

function initInputMask() {
	let formPhone = document.querySelectorAll('.form__phone');
	formPhone.forEach(element => {
		Inputmask({ "mask": "+7 (999) 999-99-99" }).mask(element);
	});
}

initInputMask();

// Инициализация just-validate
// https://github.com/horprogs/Just-validate
// https://just-validate.dev/

// function initJustValidatHelpForme() {
// 	const validation = new JustValidate('.b06-form');

// 	validation
// 		.addField('.form__phone', [
// 			{
// 				rule: 'required',
// 				errorMessage: 'Введите телефон!',
// 			},
// 		])
// 		.addField('.form__agreement', [
// 			{
// 				rule: 'required',
// 				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
// 			},
// 		])
// 		.addField('.form__email', [
// 			{
// 				rule: 'required',
// 				errorMessage: 'Email обязателен!',
// 			},
// 			{
// 				rule: 'email',
// 				errorMessage: 'Email не корректен!',
// 			},
// 		])
// }

// if (document.querySelector('.form__phone')) {
// 	initJustValidatHelpForme();
// }// -include './myscripts/accordeon.js'
		// -include './myscripts/blazy-init.js'
	}
);
